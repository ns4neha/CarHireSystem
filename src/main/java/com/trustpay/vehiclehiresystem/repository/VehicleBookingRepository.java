package com.trustpay.vehiclehiresystem.repository;

import com.trustpay.vehiclehiresystem.model.Customer;
import com.trustpay.vehiclehiresystem.model.Vehicle;
import org.springframework.util.Assert;

import java.text.MessageFormat;
import java.util.*;
import java.util.stream.Collectors;

public class VehicleBookingRepository {

    Map<Long, Vehicle> vehicleMap = Collections.synchronizedMap(new HashMap<Long,Vehicle>());
    Map<Customer, List<Vehicle>> customerVehicleBooking = Collections.synchronizedMap(new HashMap<Customer, List<Vehicle>>());
    Random random = new Random();

    public Long save(Vehicle vehicle) {

        Assert.isNull(vehicle.getId(), "Id is to be generated by the add method.");
        vehicle.setId(random.nextLong());
        vehicleMap.put(vehicle.getId(), vehicle);

        return vehicle.getId();
    }

    public List<Vehicle> findAll() {

        return new ArrayList<>(vehicleMap.values());
    }

    public List<Vehicle> findByBookedTrue() {

        return vehicleMap.values().stream().filter(v -> v.getBooked().equals(true)).collect(Collectors.toList());
    }

    public List<Vehicle> findByBookedFalse() {

        return vehicleMap.values().stream().filter(v -> v.getBooked().equals(false)).collect(Collectors.toList());
    }

    public boolean allocateVehiclesToCustomer(List<Long> vehicleIdList, Customer customer) {
        Optional<Long> isVehicleAlreadyBooked = vehicleIdList.stream().filter(id -> vehicleMap.get(id).getBooked().equals(true)).findAny();

        isVehicleAlreadyBooked.ifPresent((vehicleId) -> {throw new UnsupportedOperationException(
                MessageFormat.format("%s vehicle is already booked. Cannot allocate this now to a new customer", vehicleId));});

        synchronized (vehicleMap) {
            vehicleIdList.stream().forEach(vehicleId -> {
                Vehicle vehicle = vehicleMap.get(vehicleId);

                synchronized (vehicle) {
                    vehicle.setBooked(true);
                    customerVehicleBooking.putIfAbsent(customer, Collections.synchronizedList(new ArrayList<>()));
                    List<Vehicle> vehicleList = customerVehicleBooking.get(customer);
                    vehicleList.add(vehicle);
                }
            });

        }
        return true;
    }

}